<workflow>
  <step number="1">
    <name>Fetch Pull Request Information</name>
    <instructions>
      The user will provide a PR number or URL. Extract the necessary information.
      Use the GitHub CLI to fetch the PR details from the current repository.
      
      <execute_command>
      <command>gh pr view [PR_NUMBER_OR_URL] --json number,title,body,headRefName,baseRefName,url</command>
      </execute_command>
    </instructions>
  </step>

  <step number="2">
    <name>Fetch Associated Issue (If Any)</name>
    <instructions>
      Check the pull request body for a reference to a GitHub issue (e.g., "Fixes #123", "Closes #456").
      If an issue is referenced, use the GitHub CLI to fetch its details:

      <execute_command>
      <command>gh issue view [ISSUE_NUMBER]</command>
      </execute_command>

      The issue description and comments can provide valuable context for the review.
    </instructions>
  </step>

  <step number="3">
    <name>Fetch Pull Request Diff</name>
    <instructions>
      Get the pull request diff to understand the changes:
      
      <execute_command>
      <command>gh pr diff [PR_NUMBER_OR_URL]</command>
      </execute_command>
    </instructions>
  </step>

  <step number="4">
    <name>Check Out Pull Request Locally</name>
    <instructions>
      Use the GitHub CLI to check out the pull request locally. This provides a better understanding of code context and interactions than relying solely on the diff.
      
      <execute_command>
      <command>gh pr checkout [PR_NUMBER_OR_URL]</command>
      </execute_command>
    </instructions>
  </step>

  <step number="5">
    <name>Fetch Existing PR Comments</name>
    <instructions>
      Get existing comments to understand the current discussion state:
      
      <execute_command>
      <command>gh pr view [PR_NUMBER_OR_URL] --comments</command>
      </execute_command>
      
      Examine existing PR comments to understand the current state of discussion. When reading the comments and reviews, you must verify which are resolved by reading the files they refer to, since they might already be resolved. This prevents you from making redundant suggestions.
    </instructions>
  </step>

  <step number="6">
    <name>Perform Comprehensive Review</name>
    <instructions>
      Review the pull request thoroughly:
      - Verify that the changes are directly related to the linked issue and do not include unrelated modifications.
      - Focus primarily on the changes made in the PR.
      - Prioritize code quality, code smell, structural consistency, and for UI-related changes, ensure proper internationalization (i18n) is applied.
      - Watch for signs of technical debt (e.g., overly complex logic, lack of abstraction, tight coupling, missing tests, TODOs).
      - For large PRs, alert the user and recommend breaking it up if appropriate.
      - NEVER run tests or execute code in this mode. Your role is limited to code review and analysis.
      
      Document your findings:
      - Code quality issues
      - Structural improvements
      - Missing tests or documentation
      - Potential bugs or edge cases
      - Performance concerns
      - Security considerations
    </instructions>
  </step>

  <step number="7">
    <name>Prepare Review Comments</name>
    <instructions>
      Format your review comments following these guidelines:
      
      Your suggestions should:
      - Use a **friendly, curious tone** — prefer asking: "Is this intentional?" or "Could we approach this differently to improve X?"
      - Avoid assumptions or judgments; ask questions instead of declaring problems.
      - Skip ALL praise and positive comments. Focus exclusively on issues that need attention.
      - Use Markdown sparingly — only for code blocks or when absolutely necessary for clarity. Avoid markdown headings (###, ##, etc.) entirely.
      - Avoid including internal evaluation terminology (e.g., scores or internal tags) in public comments.
      
      When linking to specific lines or files, use full GitHub URLs relative to the repository.
      
      Group your comments by:
      - Critical issues (must fix)
      - Important suggestions (should consider)
      - Minor improvements (nice to have)
    </instructions>
  </step>

  <step number="8">
    <name>Preview Review with User</name>
    <instructions>
      Always show the user a preview of your review suggestions and comments before taking any action.
      Summarize your findings clearly for the user before submitting comments.
      
      <ask_followup_question>
      <question>I've completed my review of PR #[number]. Here's what I found:

      [Summary of findings organized by priority]

      Would you like me to:
      1. Create a comprehensive review with all comments
      2. Modify any of the suggestions
      3. Skip the review submission</question>
      <follow_up>
      <suggest>Create a comprehensive review</suggest>
      <suggest>Let me modify the suggestions first</suggest>
      <suggest>Skip submission - just wanted the analysis</suggest>
      </follow_up>
      </ask_followup_question>
    </instructions>
  </step>

  <step number="9">
    <name>Submit Review</name>
    <instructions>
      Based on user preference, submit the review as a comprehensive review using the `gh pr review` command.
      
      <execute_command>
      <command>gh pr review [PR_NUMBER_OR_URL] --comment "[Overall review summary]"</command>
      </execute_command>
    </instructions>
  </step>
</workflow>
